from abc import ABC, abstractmethod
from typing import List, Dict
from lphy.core.model.Value import Value
from lphy.core.model.GraphicalModelNode import GraphicalModelNode


class Generator(GraphicalModelNode, ABC):

    #TODO TypeError: Can't instantiate abstract class LogNormal with abstract methods code_string, get_name

    # return the specification operator, for function '=' and for generative distribution '~'
    @abstractmethod
    def specification_operator(self) -> str:
        pass

    # something diff to get_id
    def get_name(self) -> str:
        return self.get_id()

    # return a value generated by this generator.
    @abstractmethod
    def generate(self) -> Value:
        pass

    def code_string(self) -> str:
        pass

    @abstractmethod
    def get_params(self) -> Dict[str, Value]:
        pass

    def get_type_name(self) -> str:
        return self.__class__.__name__

    # TODO not sure if set_param is still required?
    def set_param(self, param_name: str, value: Value) -> None:
        method_name = "set" + param_name[0].upper() + param_name[1:]
        try:
            method = getattr(self.__class__, method_name)
            method(self, value.value())
        except AttributeError:
            methods = [m for m in dir(self.__class__) if callable(getattr(self.__class__, m))]
            for method_name in methods:
                if method_name == method_name:
                    method = getattr(self.__class__, method_name)
                    try:
                        method(self, value.value())
                        break
                    except (AttributeError, InvocationTargetException, IllegalAccessException):
                        pass
        except (AttributeError, InvocationTargetException, IllegalAccessException):
            pass

    def set_input(self, param_name: str, value: Value) -> None:
        #TODO
        #self.set_param(param_name, value)
        value.add_output(self)

    def set_inputs(self, params: Dict[str, Value]) -> None:
        for param_name, value in params.items():
            self.set_input(param_name, value)

    def get_inputs(self):
        return list(self.get_params().values())

    def get_unique_id(self) -> str:
        return str(hash(self))

    def get_param_name(self, value: Value) -> str:
        params = self.get_params()
        for key, val in params.items():
            if val == value:
                return key
        return ""

    def has_random_parameters(self) -> bool:
        for value in self.get_params().values():
            if value is None:
                raise RuntimeError("Unexpected null value in generator " + self.get_name())
            if value.is_random():
                return True
        return False
